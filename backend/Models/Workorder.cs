// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var workorder = Workorder.FromJson(jsonString);

namespace backend.Models.Workorder
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class Workorder
    {
        [J("Workorderid")]  public long Workorderid { get; set; }   
        [J("Jobid")]        public long Jobid { get; set; }         
        [J("Clientid")]     public long Clientid { get; set; }      
        [J("Inputid")]      public long Inputid { get; set; }       
        [J("Status")]       public string Status { get; set; }      
        #nullable enable
        [J("DateApproved")]  public DateTime? DateApproved { get; set; }
        [J("DueDate")]      public DateTime? DueDate { get; set; }     
        #nullable disable
        [J("DateCreated")]  public DateTime DateCreated { get; set; } 
    }

    public partial class Workorder
    {
        public static List<Workorder> FromJson(string json) => JsonConvert.DeserializeObject<List<Workorder>>(json, backend.Models.Workorder.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Workorder> self) => JsonConvert.SerializeObject(self, backend.Models.Workorder.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }


}
