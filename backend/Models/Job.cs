// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using backend.Models.Jobs;
//
//    var job = Job.FromJson(jsonString);

namespace backend.Models.Job
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class Job
    {
        [J("jobid")][JsonConverter(typeof(ParseStringConverter))]    public long Jobid { get; set; }          
        [J("name")]                                                  public string Name { get; set; }         
        [J("clientid")][JsonConverter(typeof(ParseStringConverter))] public long Clientid { get; set; }       
        [J("SLAOveride")]                                            public string SlaOveride { get; set; }   
        [J("Approval")]                                              public string Approval { get; set; }     
        [J("CustomPostage")]                                         public string CustomPostage { get; set; }
    }

    public partial class Job
    {
        public static List<Job> FromJson(string json) => JsonConvert.DeserializeObject<List<Job>>(json, backend.Models.Job.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Job> self) => JsonConvert.SerializeObject(self, backend.Models.Job.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
