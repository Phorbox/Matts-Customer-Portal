// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using backend.Models.Project;
//
//    var project = Project.FromJson(jsonString);

namespace backend.Models.Project
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class Project
    {
        [J("Projectid")]       public long Projectid { get; set; }      
        [J("ProjectName")]     public string ProjectName { get; set; }  
        [J("Clienteleid")]     public long Clienteleid { get; set; }    
        [J("SlaOveride")]      public long? SlaOveride { get; set; }    
        [J("Approval")]        public string Approval { get; set; }     
        [J("ClienteleName")]   public string ClienteleName { get; set; }
        [J("RetentionLength")] public long RetentionLength { get; set; }
        [J("SlaDueDate")]      public long SlaDueDate { get; set; }     
        [J("ParentId")]        public long? ParentId { get; set; }      
    }

    public partial class Project
    {
        public static List<Project> FromJson(string json) => JsonConvert.DeserializeObject<List<Project>>(json, backend.Models.Project.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Project> self) => JsonConvert.SerializeObject(self, backend.Models.Project.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
