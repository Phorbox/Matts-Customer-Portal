// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using backend.Models.Clientele;
//
//    var clientele = Clientele.FromJson(jsonString);

namespace backend.Models.Clientele
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class Clientele
    {
        [J("clientid")][JsonConverter(typeof(ParseStringConverter))]         public long Clientid { get; set; }       
        [J("name")]                                                          public string Name { get; set; }         
        [J("Retention Length")][JsonConverter(typeof(ParseStringConverter))] public long RetentionLength { get; set; }
        [J("sladuedate")][JsonConverter(typeof(ParseStringConverter))]       public long Sladuedate { get; set; }     
        [J("parentid")]                                                      public string Parentid { get; set; }     
        [J("childids")]                                                      public Childids Childids { get; set; }   
    }

    public partial struct Childids
    {
        public List<long> IntegerArray;
        public string String;

        public static implicit operator Childids(List<long> IntegerArray) => new Childids { IntegerArray = IntegerArray };
        public static implicit operator Childids(string String) => new Childids { String = String };
    }

    public partial class Clientele
    {
        public static List<Clientele> FromJson(string json) => JsonConvert.DeserializeObject<List<Clientele>>(json, backend.Models.Clientele.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Clientele> self) => JsonConvert.SerializeObject(self, backend.Models.Clientele.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ChildidsConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class ChildidsConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Childids) || t == typeof(Childids?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Childids { String = stringValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<long>>(reader);
                    return new Childids { IntegerArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Childids");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Childids)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.IntegerArray != null)
            {
                serializer.Serialize(writer, value.IntegerArray);
                return;
            }
            throw new Exception("Cannot marshal type Childids");
        }

        public static readonly ChildidsConverter Singleton = new ChildidsConverter();
    }
}
